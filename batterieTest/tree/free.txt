#include <stdio.h>
#include <stdlib.h>

#include "../include/util.h"
#include "../include/list.h"
#include "../include/tree.h"
#include "../include/heap.h"
#include "../include/sort.h"
#include "../include/geometry.h"
#include "../include/algo.h"

int main(int argc, char *argv[]) {
    CBTree *T;

    int *a = (int *) calloc(1, sizeof(int));
    int *b = (int *) calloc(1, sizeof(int));
    int *c = (int *) calloc(1, sizeof(int));
    int *d = (int *) calloc(1, sizeof(int));
    int *e = (int *) calloc(1, sizeof(int));
    int *f = (int *) calloc(1, sizeof(int));

    *a = 1;
    *b = 2;
    *c = 3;
    *d = 4;
    *e = 5;
    *f = 6;

    printf("\nIl y a %d argument et argv[0] : %s\n\n", argc, argv[0]);

    printf("\n\tCréation arbre :");
    T = newCBTree(&viewInt, &freeInt);

    printf("\n\tRemplissage de l'arbre :\n");
    printf("ajout de a\n");
    CBTreeInsert(T, a);
    printf("ajout de b\n");
    CBTreeInsert(T, b);
    printf("ajout de c\n");
    CBTreeInsert(T, c);
    printf("ajout de d\n");
    CBTreeInsert(T, d);
    printf("ajout de e\n");
    CBTreeInsert(T, e);
    printf("ajout de f\n");
    CBTreeInsert(T, f);

    printf("\n\tVérification que l'arbre est bien plain & copie de chaque node :");
    printf("\n1er  node (copier) : ");
    TNode *node1 = Root(T);
    (*T->viewData)(getTNodeData(node1));
    printf("\n2ème node (copier) : ");
    TNode *node2 = Left(Root(T));
    (*T->viewData)(getTNodeData(node2));
    printf("\n3ème node (copier) : ");
    TNode *node3 = Right(Root(T));
    (*T->viewData)(getTNodeData(node3));
    printf("\n4ème node (copier) : ");
    TNode *node4 = Left(Left(Root(T)));
    (*T->viewData)(getTNodeData(node4));
    printf("\n5ème node (copier) : ");
    TNode *node5 = Right(Left(Root(T)));
    (*T->viewData)(getTNodeData(node5));
    printf("\n6ème node (copier) : ");
    TNode *node6 = Left(Right(Root(T)));
    (*T->viewData)(getTNodeData(node6));

    printf("\n\n\tVisualisation de l'arbre global (manuel) :\n");
    printf("              1\n");
    printf("           /     \\\n");
    printf("          2       3\n");
    printf("         / \\     /\n");
    printf("        4   5   6\n");


    printf("\n\tEtat de l'arbre avant le free avec adresse :\n");
    printf("@ T : %p - Size : %d", T, getCBTreeSize(T));
    printf("\n1er  node (@ : %p & @2 : %p) : ", node1, Root(T));
    viewInt(getTNodeData(node1));
    printf("\n2ème node (@ : %p) : ", node2);
    viewInt(getTNodeData(node2));
    printf("\n3ème node (@ : %p) : ", node3);
    viewInt(getTNodeData(node3));
    printf("\n4ème node (@ : %p) : ", node4);
    viewInt(getTNodeData(node4));
    printf("\n5ème node (@ : %p) : ", node5);
    viewInt(getTNodeData(node5));
    printf("\n6ème node (@ : %p) : ", node6);
    viewInt(getTNodeData(node6));

    int i = 1;
    printf("\n\n\tfreeCBTree avec deleteData = %d :\n", i);
    freeCBTree(T, i);

    printf("\n\tEtat de l'arbre après le free avec adresse :\n");
    printf("@ T : %p - Size : %d", T, getCBTreeSize(T));
    printf("\n1er  node (@ : %p) : ", node1);
    viewInt(getTNodeData(node1));
    printf("\n2ème node (@ : %p) : ", node2);
    viewInt(getTNodeData(node2));
    printf("\n3ème node (@ : %p) : ", node3);
    viewInt(getTNodeData(node3));
    printf("\n4ème node (@ : %p) : ", node4);
    viewInt(getTNodeData(node4));
    printf("\n5ème node (@ : %p) : ", node5);
    viewInt(getTNodeData(node5));
    printf("\n6ème node (@ : %p) : ", node6);
    //viewInt(getTNodeData(node6));

    printf("\n\n\tAutre type de test :\n");

    printf("\t\tTest sur node1 ------------------------------ :\n");
    if (node1 == NULL) // node ------------------------------
        printf("node est NULL -_-\n");
    else
        printf("node n'est pas NULL ^^\n");
    if (getTNodeData(node1) == NULL) // data ----------------
        printf("data est NULL -_-\n");
    else if (getTNodeData(node1) == a)
        printf("data non changer -_-");
    else
        printf("data n'est pas NULL ^^\n");
    if (Left(node1) == NULL) // left ------------------------
        printf("left est NULL ^^\n");
    else
        printf("left n'est pas NULL -_-\n");
    if (Right(node1) == NULL) // right ----------------------
        printf("right est NULL ^^\n");
    else
        printf("right n'est pas NULL -_-\n");

    printf("\t\tTest sur node2 ------------------------------ :\n");
    if (node2 == NULL) // node ------------------------------
        printf("node est NULL -_-\n");
    else
        printf("node n'est pas NULL ^^\n");
    if (getTNodeData(node2) == NULL) // data ----------------
        printf("data est NULL -_-\n");
    else if (getTNodeData(node2) == b)
        printf("data non changer -_-\n");
    else
        printf("data n'est pas NULL ^^\n");
    if (Left(node2) == NULL) // left ------------------------
        printf("left est NULL ^^\n");
    else
        printf("left n'est pas NULL -_-\n");
    if (Right(node2) == NULL) // right ----------------------
        printf("right est NULL ^^\n");
    else
        printf("right n'est pas NULL -_-\n");

    printf("\t\tTest sur node3 ------------------------------ :\n");
    if (node3 == NULL) // node ------------------------------
        printf("node est NULL -_-\n");
    else
        printf("node n'est pas NULL ^^\n");
    if (getTNodeData(node3) == NULL) // data ----------------
        printf("data est NULL -_-\n");
    else if (getTNodeData(node3) == c)
        printf("data non changer -_-");
    else
        printf("data n'est pas NULL ^^\n");
    if (Left(node3) == NULL) // left ------------------------
        printf("left est NULL ^^\n");
    else
        printf("left n'est pas NULL -_-\n");
    if (Right(node3) == NULL) // right ----------------------
        printf("right est NULL ^^\n");
    else
        printf("right n'est pas NULL -_-\n");

    printf("\t\tTest sur node4 ------------------------------ :\n");
    if (node4 == NULL) // node ------------------------------
        printf("node est NULL -_-\n");
    else
        printf("node n'est pas NULL ^^\n");
    if (getTNodeData(node4) == NULL) // data ----------------
        printf("data est NULL -_-\n");
    else if (getTNodeData(node4) == d)
        printf("data non changer -_-\n");
    else
        printf("data n'est pas NULL ^^\n");
    if (Left(node4) == NULL) // left ------------------------
        printf("left est NULL ^^\n");
    else
        printf("left n'est pas NULL -_-\n");
    if (Right(node4) == NULL) // right ----------------------
        printf("right est NULL ^^\n");
    else
        printf("right n'est pas NULL -_-\n");

    printf("\t\tTest sur node5 ------------------------------ :\n");
    if (node5 == NULL) // node ------------------------------
        printf("node est NULL -_-\n");
    else
        printf("node n'est pas NULL ^^\n");
    if (getTNodeData(node5) == NULL) // data ----------------
        printf("data est NULL -_-\n");
    else if (getTNodeData(node5) == e)
        printf("data non changer -_-\n");
    else
        printf("data n'est pas NULL ^^\n");
    if (Left(node5) == NULL) // left ------------------------
        printf("left est NULL ^^\n");
    else
        printf("left n'est pas NULL -_-\n");
    if (Right(node5) == NULL) // right ----------------------
        printf("right est NULL ^^\n");
    else
        printf("right n'est pas NULL -_-\n");

    printf("\t\tTest sur node6 ------------------------------ :\n");
    if (node6 == NULL) // node ------------------------------
        printf("node est NULL -_-\n");
    else
        printf("node n'est pas NULL ^^\n");
    if (getTNodeData(node6) == NULL) // data ----------------
        printf("data est NULL -_-\n");
    else if (getTNodeData(node6) == f)
        printf("data non changer -_-\n");
    else
        printf("data n'est pas NULL ^^\n");
    if (Left(node6) == NULL) // left ------------------------
        printf("left est NULL ^^\n");
    else
        printf("left n'est pas NULL -_-\n");
    if (Right(node6) == NULL) // right ----------------------
        printf("right est NULL ^^\n");
    else
        printf("right n'est pas NULL -_-\n");


    printf("\n\tTest sur les fils des nodes :\n");
    printf("data : %d\n", (int) getTNodeData(Left(node2)));
    printf("@ left node4 : %p (NULL)\n", Left(node4));
    printf("@ left node5 : %p (NULL)\n", Left(node5));

    return EXIT_SUCCESS;
}