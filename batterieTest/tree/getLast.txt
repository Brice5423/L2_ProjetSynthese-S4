#include <stdio.h>
#include <stdlib.h>

#include "../include/util.h"
#include "../include/list.h"
#include "../include/tree.h"
#include "../include/heap.h"
#include "../include/sort.h"
#include "../include/geometry.h"
#include "../include/algo.h"

int main(int argc, char *argv[]) {
    CBTree *T;

    int *a = (int *) calloc(1, sizeof(int));
    int *b = (int *) calloc(1, sizeof(int));
    int *c = (int *) calloc(1, sizeof(int));
    int *d = (int *) calloc(1, sizeof(int));
    int *e = (int *) calloc(1, sizeof(int));
    int *f = (int *) calloc(1, sizeof(int));

    *a = 1;
    *b = 2;
    *c = 3;
    *d = 4;
    *e = 5;
    *f = 6;

    printf("\nIl y a %d argument et argv[0] : %s\n\n", argc, argv[0]);

    printf("\n\tCréation arbre :");
    T = newCBTree(&viewInt, &freeInt);

    printf("\n\tRemplissage de l'arbre :\n");
    printf("Ajout de a :\n");
    CBTreeInsert(T, a);
    printf("Ajout de b (size : %d) :\n", getCBTreeSize(T));
    CBTreeInsert(T, b);
    printf("Ajout de c :\n");
    CBTreeInsert(T, c);
    printf("Ajout de d :\n");
    CBTreeInsert(T, d);
    printf("Ajout de e :\n");
    CBTreeInsert(T, e);
    printf("Ajout de f :\n");
    CBTreeInsert(T, f);

    printf("\n\tVérification que l'arbre est bien plain & copie de chaque node :");
    printf("\n1er  node (copier) : ");
    TNode *node1 = Root(T);
    (*T->viewData)(getTNodeData(node1));
    printf("\n2ème node (copier) : ");
    TNode *node2 = Left(Root(T));
    (*T->viewData)(getTNodeData(node2));
    printf("\n3ème node (copier) : ");
    TNode *node3 = Right(Root(T));
    (*T->viewData)(getTNodeData(node3));
    printf("\n4ème node (copier) : ");
    TNode *node4 = Left(Left(Root(T)));
    (*T->viewData)(getTNodeData(node4));
    printf("\n5ème node (copier) : ");
    TNode *node5 = Right(Left(Root(T)));
    (*T->viewData)(getTNodeData(node5));
    printf("\n6ème node (copier) : ");
    TNode *node6 = Left(Right(Root(T)));
    (*T->viewData)(getTNodeData(node6));

    printf("\n\n\tVisualisation de l'arbre global (manuel) :\n");
    printf("              1\n");
    printf("           /     \\\n");
    printf("          2       3\n");
    printf("         / \\     /\n");
    printf("        4   5   6\n");

    printf("\n\tCBTreeGetLast :");
    TNode *nodeLast;
    nodeLast = CBTreeGetLast(T);
    printf("\n\tVérification :\n");
    printf("data : ");
    (*T->viewData)(getTNodeData(nodeLast));
    printf("\n@L : %p\n@6 : %p\n", nodeLast, node6);


    return EXIT_SUCCESS;
}